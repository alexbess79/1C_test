#Использовать v8runner
#Использовать strings
#Использовать fs

Перем мРабочийКаталогСборки;
Перем Лог;

// Возвращает значение рабочего каталога, глобальное для всех шагов сборки
//
Функция РабочийКаталог() Экспорт

    Если мРабочийКаталогСборки = Неопределено Тогда
        
        Переменная = ПолучитьПеременнуюСреды(ИмяПеременнойОкруженияКаталогСборки());
        Если Не ПустаяСтрока(Переменная) Тогда
            мРабочийКаталогСборки = Переменная;
        Иначе
            мРабочийКаталогСборки = ОбъединитьПути(ТекущийКаталог(), ".packman");
        КонецЕсли;
    КонецЕсли;

    ФС.ОбеспечитьКаталог(мРабочийКаталогСборки);

    Возврат мРабочийКаталогСборки;

КонецФункции // РабочийКаталог() Экспорт

// Получает конфигуратор, настроенный на рабочий каталог и временную базу
//
Функция ПолучитьКонфигуратор() Экспорт

    УК = Новый УправлениеКонфигуратором();

    ИмяКонфигурационногоФайла = ПолучитьПутьКФайлуКонфигурации();
    Если ФС.ФайлСуществует(ИмяКонфигурационногоФайла) Тогда
        Лог.Отладка("Файл настройки подключения найден.");
        УстановитьКонтекстПодключения(УК, ИмяКонфигурационногоФайла);
    Иначе
        Лог.Отладка("Файл настройки подключения не найден");
    КонецЕсли;
    УК.КаталогСборки(РабочийКаталог());

    Возврат УК;

КонецФункции

Процедура УстановитьКонтекстПодключения(УК, ИмяКонфигурационногоФайла)
    ПараметрыПодключения = ПрочитатьДанныеИзФайла(ИмяКонфигурационногоФайла);
    СтрокаПодключения = ПараметрыПодключения.СтрокаПодключения;
    Лог.Отладка("Строка подключения из файла %1", СтрокаПодключения);
    ПользовательИБ = "";
    ПарольИБ = "";
    Если ПараметрыПодключения.Свойство("ПользовательИБ") Тогда
        ПользовательИБ = ПараметрыПодключения.ПользовательИБ;
    КонецЕсли;  
    Если ПараметрыПодключения.Свойство("ПарольИБ") Тогда
        ПарольИБ = ПараметрыПодключения.ПарольИБ;
    КонецЕсли;  
    
    УК.УстановитьКонтекст(СтрокаПодключения, ПользовательИБ, ПарольИБ);
КонецПроцедуры

Процедура ПрименитьВерсию1С(Знач УправлениеКонфигуратором, Знач Версия1С) Экспорт
    Если ЗначениеЗаполнено(Версия1С) Тогда
        УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(Версия1С);
    КонецЕсли;
КонецПроцедуры

Функция ИмяПеременнойОкруженияКаталогСборки() Экспорт
    Возврат "VPACKMAN_WORKDIR";
КонецФункции

Функция ИмяКаталогаФормированияДистрибутива() Экспорт
    Возврат "distr";
КонецФункции

Функция ИмяФайлаИнформацииОМетаданных() Экспорт
    Возврат "v8-metadata.info";
КонецФункции // ИмяФайлаИнформацииОМетаданных()

Функция ИмяКонфигурационногоФайла() Экспорт
    Возврат "packman.conf";
КонецФункции // ИмяФайлаИнформацииОМетаданных()

Функция ПолучитьПутьКФайлуКонфигурации() Экспорт
    Возврат ОбъединитьПути(РабочийКаталог(), ИмяКонфигурационногоФайла());
КонецФункции

Функция ПрочитатьИнформациюОМетаданных(Знач ИмяФайла) Экспорт

    Результат = ПрочитатьДанныеИзФайла(ИмяФайла); 
    Если Не Результат.Свойство("Версия") Тогда
        ВызватьИсключение "Не найдено поле Версия в файле метаданных";
    КонецЕсли;

    // Предустановленное окружение
    Переменные = ПолучитьПеременнуюСреды("VPACKMAN_BUILDVARS");
    Если Переменные <> Неопределено Тогда
        Лог.Отладка("Обнаружена переменная VPACKMAN_BUILDVARS");
        Лог.Отладка("VPACKMAN_BUILDVARS=" + Переменные);
        
        Строки = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(Переменные, ";");
        Для Каждого Стр Из Строки Цикл
            Лог.Отладка("Прочитано: " + Стр);
            Позиция = Найти(Стр, "=");
            Если Позиция = 0 Тогда
                Продолжить;
            КонецЕсли;
                
            Результат.Вставить(Лев(Стр, Позиция-1), Сред(Стр, Позиция+1));
        КонецЦикла;
    Иначе
        Лог.Отладка("Переменная окружения VPACKMAN_BUILDVARS не найдена");
    КонецЕсли;

    Возврат Результат;

КонецФункции // ПрочитатьИнформациюОМетаданных()

Функция ПрочитатьДанныеИзФайла(ИмяФайла)

    Результат = Новый Структура();
    ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
    Лог.Отладка("Читаю информацию о метаданных");
    Пока Истина Цикл
        Стр = ЧтениеТекста.ПрочитатьСтроку();
        Если Стр = Неопределено Тогда
            Прервать;
        КонецЕсли;
        Лог.Отладка("Прочитано: " + Стр);
        Позиция = Найти(Стр, "=");
        Если Позиция = 0 Тогда
            Продолжить;
        КонецЕсли;
        
        Результат.Вставить(Лев(Стр, Позиция-1), Сред(Стр, Позиция+1));
    КонецЦикла;

    ЧтениеТекста.Закрыть();

    Возврат Результат;

КонецФункции

Функция ОпределитьСтандартноеИмяКаталогаШаблона(Знач ИнформацияОМетаданных) Экспорт

    Перем ВерсияМетаданных;
    Перем НомерКоммита;
    Перем НомерСборкиСервера;

    ВерсияМетаданных = СтрЗаменить(ИнформацияОМетаданных.Версия, "/", "_");
    ИнформацияОМетаданных.Свойство("НомерВерсииХранилища", НомерКоммита);
    ИнформацияОМетаданных.Свойство("НомерСборкиСервера", НомерСборкиСервера);

    Возврат ВерсияМетаданных + НеобязательныйСуффикс("-", НомерКоммита) + НеобязательныйСуффикс(".", НомерСборкиСервера);

КонецФункции // ОпределитьСтандартноеИмяКаталогаШаблона()

Функция НеобязательныйСуффикс(Знач Разделитель, Знач Значение)
    Если Не ПустаяСтрока(Значение) Тогда
        Возврат Разделитель + Значение;
    КонецЕсли;
    
    Возврат "";
КонецФункции

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());