

// Процедура получает токен авторизации либо из базы.
// либо с сервера Элком по Логину паролю
//Логин и пароль где -то надо хранить
//Токен надо куда то впихнуть, вместе со сроком жизни.
//И если срок истек получаем новый
//  Authorization - параметр в котором храним токен
//  DataExpAuthorization    - параметр в котором храним срок жизни токена
//  loginAuthorization      - логин авторизации  
//  passwordAuthorization   - пароль авторизации
//
// Параметры:
//  СсылкаВладелецПараметров  - Ссылка - ссылка на объект у которого хранятся параметры доступа по API. 
//								Обычно Справочник.Партнеры
//   							но можно и переделать под каждого пользователя (пока логин один)
//   Строка   - Токен аворизации
//
&НаСервере
Функция ПолучитьТокенАвторизации(СсылкаВладелецПараметров)
// Авторизация
//Для авторизации необходимо с методом POST обратиться по URL
//https://online.el-com.ru/api/v1/sign-in/
//Описание:
//Значение Описание            	
//login Номер телефона, указанный при регистрации
//в формате: 79999999999
//password Пароль, указанный при регистрации.
//Пример тела запроса JSON:
//{
//"login":"79999999999",
//"password":"123456789"
//}
//Пример успешного ответа:
//{
// "message": "Tokens created",
// "success": true,
// "errors": null,
// "data": {
// "access": {
// "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3OTg1Mzg3ODY0MiIsInVzciI6IjM3O
//GIxZTc1ODg5YWI1YmUzNGMzNDZmZGJlMDllZjg5NTgwOTY4MzIxZTJkY2E4NDY4MGY0MzM2ZmExYjYxYjUiL
//CJyb2xlcyI6WyJST0xFX0FDQF0IjoxNj30NBesRmXkqMGOEFiXOM3uUgItEHkIIFhD",
// "info": null
// },
// "refresh": {
// "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3OTg1Mzg3ODY0MiIsInVzciI6IjM3O
//GIxZTc1ODg5YWI1YmUzNGMzNDZmZGJlMDllZjg5NTgwOTY4MzIxZTJkY2E4NDY4MGY0MzM2ZmExYjYxYjUiL
//CJpYXQiNTksImV4cCI6MTY4NDMxNjA1OX0_FhikptLVVu0Bqggkw",
// "info": null
// }
// }
//}
//Для работы нужно скопировать токен из поля data.access.token. Это главный токен с временем жизни 1
//год.
//Токен нужно вставить в заголовок authorization c префиксом Bearer <token>.
//Пример:
//header 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI3OTg1Mzg3ODY0MiIsInVzciI
//6IjM3OGIxZTc1ODg5YWI1YmUzNGMzNDZmZGJlMDllZjg5NTgwOTY4MzIxZTJkY2E4NDY4MGY0MzM2ZmExYjYxY
//jUiLCJyb2xlcyI6WyJST0xFX0FDQF0IjoxNj30NBesRmXkqMGOEFiXOM3uUgItEHkIIFhD' 

	ТребуетсяОбновлениеПараметров = Истина;
	СтруктураПараметров = ПолучитьСтруктуруПараметров(СсылкаВладелецПараметров); //Различные Параметры для доступа к API
	Если СтруктураПараметров. Свойство("Authorization") 
		 И СтруктураПараметров. Свойство("DataExpAuthorization")
		 И СтруктураПараметров. Свойство("loginAuthorization")
		 И СтруктураПараметров. Свойство("passwordAuthorization") Тогда
	     //Есть все нужные свойства в параметрах
		Если ЗначениеЗаполнено(СтруктураПараметров.Authorization) 
			И СтруктураПараметров.DataExpAuthorization+3600>ТекущаяДата() Тогда
			//Токен есть и срок токена не истек
			ТребуетсяОбновлениеПараметров = Ложь;
		КонецЕсли
	КонецЕсли;
		 
	Если ТребуетсяОбновлениеПараметров Тогда //Какой то из параметров в структуре отсутствует или истек токен
		//СтуктураПарамметров = Новый Структура;
		СтруктураПараметров.Вставить("loginAuthorization","79228449240");
		СтруктураПараметров.Вставить("passwordAuthorization","q1w2E#R$"); //Можно конечно шифрануть пароль в BASE64, пока так 
		
	//Создаем соединение с сервером API
		Соединение = Новый HTTPСоединение(
		    "online.el-com.ru", // сервер (хост)
		    443, // порт, по умолчанию для http используется 80, для https 443
		    , // пользователь для доступа к серверу (если он есть)
		    , // пароль для доступа к серверу (если он есть)
		    , // здесь указывается прокси, если он есть
		    , // таймаут в секундах, 0 или пусто - не устанавливать
		      Новый ЗащищенноеСоединениеOpenSSL()// защищенное соединение, если используется https
		);
		//
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json"); 
		
		ДанныJSON = Новый Структура;
		ДанныJSON.Вставить("login",СтруктураПараметров.loginAuthorization);
		ДанныJSON.Вставить("password",СтруктураПараметров.passwordAuthorization);
		
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,ДанныJSON);
		ТелоЗапроса = ЗаписьJSON.Закрыть();  
		    
		Запрос = Новый HTTPЗапрос("api/v1/sign-in/", Заголовки);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);

		ОтветHTTP = Соединение.ВызватьHTTPМетод("POST", Запрос);
		Если ОтветHTTP.КодСостояния <> 200 Тогда
			Возврат Ложь;
		КонецЕсли;	
		СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ОтветСТокеном = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();   
		
		СтруктураПараметров.Вставить("Authorization",ОтветСТокеном.data.access.token);
		СтруктураПараметров.Вставить("DataExpAuthorization",ТекущаяДата()+3500); //Срок действия токена 1 час
		УстановитьСтруктуруПараметров(СсылкаВладелецПараметров,СтруктураПараметров); //Обновим структуру параметров
	КонецЕсли;
	
	Возврат СтруктураПараметров;//Токен
	

КонецФункции // ПолучитьТокенАвторизации() 

&НаСервере
Функция ПолучитьОбновитьКаталогНаСервере(СсылкаВладелецКаталога)
//	Получение каталога
//Для получения каталога необходимо с методом GET обратиться по URL
//https://online.el-com.ru/api/v1/catalog/full-tree/
//Описание: Базовые значения
//Значение Описание
//id Id раздела каталога в нашей системе
//header Название раздела каталога
//parentId Id родительского каталога
//children Массив с вложенным подкаталогом
//level Указывает на глубину подкаталога (где 2 – это
//корневые каталоги)
//lastLevel Имеет значения false или true и указывает
//последний ли это подкаталог в ветке каталога
//productCount Указывает количество товаров в каталоге
//pos Указывает позицию раздела каталога
//Пример успешного ответа:
//{
// "message": "Catalog tree",
// "success": true,
// "errors": null,
// "data": [
// {
// "id": 9267,
// "header": "1. Кабель, провод",
// "syncUid": "caaf35b9-c14b-11ea-aad6-005056803666",
// "htHead": null,
// "htDesc": null,
// "htKeywords": null,
// "content": null,
// "parentId": 1,
// "children": […
// ],
// "enabled": true,
// "createdAt": "2022-11-07T14:34:39.672+00:00",
// "channels": [],
// "updatedAt": "2023-05-16T02:27:43.451+00:00",
// "lft": 2,
// "rgt": 541,
// "level": 2,
// "lastLevel": false,
// "productCount": 5410,
// "productCountAdditional": 0,
// "productCountPim": 22047,
// "productCountPimAdditional": 0,
// "pos": 1,
// "deleted": false,
// "catalogTreeSynonym": false,
// "terms": [],
// "picture": null,
// "icon": null,
// "pictureInput": null,
// "deleteIcon": false,
// "deletePicture": false
// }
// ]
//}
//*Если необходима только конкретная ветка каталога нужно использовать /api/v1/catalog/tree/id
//(где id это номер нужного раздела). Обновлять каталог следует не чаще 1-2 раз в месяц.    
	
	СтруктураПараметров = ПолучитьТокенАвторизации(СсылкаВладелецКаталога); // Все данные передаются через структуру параметров
	
	Соединение = Новый HTTPСоединение(
	    "online.el-com.ru", // сервер (хост)
	    443, // порт, по умолчанию для http используется 80, для https 443
	    , // пользователь для доступа к серверу (если он есть)
	    , // пароль для доступа к серверу (если он есть)
	    , // здесь указывается прокси, если он есть
	    , // таймаут в секундах, 0 или пусто - не устанавливать
	      Новый ЗащищенноеСоединениеOpenSSL()// защищенное соединение, если используется https
	);   
	
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Authorization","Bearer "+СтруктураПараметров.Authorization);
	Запрос = Новый HTTPЗапрос("api/v1/catalog/full-tree/", Заголовки);

	ОтветHTTP = Соединение.Получить(Запрос);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		Возврат Ложь;
	КонецЕсли;	
	СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ДанныеКаталога = ПрочитатьJSON(ЧтениеJSON); //Структура содержащая данные каталога
	ЧтениеJSON.Закрыть();                                                             
	
	//По элементам
	ГруппаРодитель = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	Для Каждого КаталогПервогоУровня Из ДанныеКаталога.data Цикл
		
		Если КаталогПервогоУровня.deleted Тогда //группа помечена на удаление
			Продолжить;
		КонецЕсли;
		Если НЕ КаталогПервогоУровня.enabled Тогда
			Продолжить;
		КонецЕсли;	

		//КаталогПервогоУровня - структура элемент массива
		СсылкаНаГруппуНоменклатураКонтрагентов = 
		Справочники.НоменклатураКонтрагентов.
						НайтиПоКоду(КаталогПервогоУровня.id,
									Истина,
									ГруппаРодитель,
									СсылкаВладелецКаталога); 
									
		Если НЕ ЗначениеЗаполнено(СсылкаНаГруппуНоменклатураКонтрагентов) Тогда //Нет такой группы	
			НовыйОбъектГруппа  = Справочники.НоменклатураКонтрагентов.СоздатьГруппу();
			НовыйОбъектГруппа.Владелец = СсылкаВладелецКаталога;
			НовыйОбъектГруппа.Код = КаталогПервогоУровня.id;
			НовыйОбъектГруппа.Наименование = КаталогПервогоУровня.header;
			НовыйОбъектГруппа.Родитель = ГруппаРодитель; 
			НовыйОбъектГруппа.Записать();
			СсылкаНаГруппуНоменклатураКонтрагентов = НовыйОбъектГруппа.Ссылка;
		КонецЕсли;  
		Если НЕ  КаталогПервогоУровня.lastLevel Тогда
			УровеньРекурсии = 0;
        	СоздатьПодчиненныеГруппыНоменклатуры(КаталогПервогоУровня.children,СсылкаНаГруппуНоменклатураКонтрагентов,УровеньРекурсии);
		КонецЕсли	
	КонецЦикла;
	//ДанныеКаталога = Новый Структура;
	//ДанныеКаталога.Количество();
	
КонецФункции

// Создает дочерние группы номенклатуры
//
// Параметры:
//  ДочерниеГруппы  - Массив структур - содержит описание дочерних групп
//                 
//  РодительДочернихГрупп  - Справочники.НоменклатураКонтрагентов
//
//  УровеньРекурсии - счетчик рекурсивного вызова
//
&НаСервере
Процедура СоздатьПодчиненныеГруппыНоменклатуры(ДочерниеГруппы,РодительДочернихГрупп,УровеньРекурсии)
	
	Если УровеньРекурсии>20 Тогда //Каталогов с такой глубиной нет.
		Возврат;
	Иначе
		УровеньРекурсии = УровеньРекурсии + 1;
	КонецЕсли;   
	

	Для Каждого СтруктураДочернейГруппы Из ДочерниеГруппы Цикл
		//СтруктураДочернейГруппы - структура элемент массива      
		Если НЕ СтруктураДочернейГруппы.enabled Тогда //группа не используется
			Продолжить;
		КонецЕсли;	

		Если СтруктураДочернейГруппы.deleted Тогда //группа помечена на удаление
			Продолжить;
		КонецЕсли;

		СсылкаНаГруппуНоменклатураКонтрагентов = 
		Справочники.НоменклатураКонтрагентов.
						НайтиПоКоду(СтруктураДочернейГруппы.id,
									Истина,
									РодительДочернихГрупп,
									РодительДочернихГрупп.Владелец); 
									
		Если НЕ ЗначениеЗаполнено(СсылкаНаГруппуНоменклатураКонтрагентов) Тогда //Нет такой группы	
			НовыйОбъектГруппа  = Справочники.НоменклатураКонтрагентов.СоздатьГруппу();
			НовыйОбъектГруппа.Владелец = РодительДочернихГрупп.Владелец; //Владелец тот же
			НовыйОбъектГруппа.Код = СтруктураДочернейГруппы.id;
			НовыйОбъектГруппа.Наименование = СтруктураДочернейГруппы.header;
			НовыйОбъектГруппа.Родитель = РодительДочернихГрупп; 
			НовыйОбъектГруппа.Записать();
			СсылкаНаГруппуНоменклатураКонтрагентов = НовыйОбъектГруппа.Ссылка;
		КонецЕсли;                                                                
		
		Если НЕ  СтруктураДочернейГруппы.lastLevel Тогда //Есть подчиненные группы
			УровеньРекурсии = 0;
        	СоздатьПодчиненныеГруппыНоменклатуры(СтруктураДочернейГруппы.children,СсылкаНаГруппуНоменклатураКонтрагентов,УровеньРекурсии);
		КонецЕсли	

	КонецЦикла;
	

КонецПроцедуры // СоздатьПодчиненныеГруппыНоменклатуры()


&НаКлиенте
Процедура ПолучитьОбновитьКаталог(Команда)
	ПолучитьОбновитьКаталогНаСервере(ВладелецКаталога);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеДопСвойства(Команда)
	ПроверитьНаличиеСоздатьДопСведение(ВладелецКаталога);
КонецПроцедуры

#Область МетодыПолученияДопРеквизитовИСведений

// <Описание функции>
//
// Возвращаемое значение:
//   Строка   - Имя свойства для хранения параметров
//
&НаСервере
Функция ПолучитьИмяСвойстваДляХраненияПараметров()

	Возврат "Параметры_API_АнализЦенПоставщиков";

КонецФункции // ПолучитьИмяСвойстваДляХраненияПараметров()

// Возвращает Элемент ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения
//
// Возвращаемое значение:
//   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения - ссылка на Допсведения
//
&НаСервере
Функция ПолучитьСвойствоДляХраненияПараметров()

	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ПолучитьИмяСвойстваДляХраненияПараметров())	

КонецФункции // ПолучитьСвойствоДляХранненияПараметров()()

// Проверяет есть ли дополнительное свойство у объекта для хранения параметров
//
// Параметры:
//  СсылкаНаОбъект  - Любая ссылка позволяющая хранить доп сведения - 
//
&НаСервере
Функция ПроверитьНаличиеСоздатьДопСведение(СсылкаНаОбъект)         

	ЕстьДопСведение = Ложь;
	ИмяДопСведения = ПолучитьИмяСвойстваДляХраненияПараметров();
	
	Если УправлениеСвойствами.ИспользоватьДопСведения(СсылкаНаОбъект) Тогда
		
		МассивДопСведений = УправлениеСвойствами.СвойстваОбъекта(СсылкаНаОбъект, Ложь, Истина);
		
		Для Инд = 0 По МассивДопСведений.ВГраница() Цикл
			
			ДополнительноеСведение =  МассивДопСведений[Инд];
			Если ДополнительноеСведение.Наименование = ИмяДопСведения Тогда
				ЕстьДопСведение = Истина;
			КонецЕсли;
			
		КонецЦикла;                 
		
		Если Не ЕстьДопСведение Тогда //Доп сведения нет у объекта
	        //ДОПОЛНИТЕЛЬНЕО СВЕДЕНИЕ В РУКОПАШКУ И ТАК ОТЛАДКИ ВЫШЕ КРЫШИ
			
			//если не нашли реквизит - будем его создавать
		//	ДопРеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		//	ДопРеквизитОбъект.Заголовок = ИмяРеквизита;
		//	ДопРеквизитОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
		//            ДопРеквизитОбъект.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(250));
		//	ДопРеквизитОбъект.Наименование = ДопРеквизитОбъект.Заголовок + " ("+ДопРеквизитОбъект.НаборСвойств+")";
		//	ДопРеквизитОбъект.Виден = Истина;
		//	ДопРеквизитОбъект.Доступен = Истина;
		//	ДопРеквизитОбъект.ДополнительныеЗначенияИспользуются = Истина;
		//	//зададим имя нового реквизита
		//	ДопРеквизитОбъект.Имя = "filap_"+СтрЗаменить(ИмяРеквизита," ","");
		//	ДопРеквизитОбъект.Записать();
		//	ДопРеквизитСсылка = ДопРеквизитОбъект.Ссылка;		
		//
		//    //добавим наш реквизит в набор дополнительных реквизитов контрагента
		//    НаборДополнительныхРеквизитовКонтрагента = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты.ПолучитьОбъект();
		//    Если НаборДополнительныхРеквизитовКонтрагента.ДополнительныеРеквизиты.Найти(ДопРеквизитСсылка, "Свойство") = Неопределено Тогда
		//        //добавим реквизит в набор
		//        Стр = НаборДополнительныхРеквизитовКонтрагента.ДополнительныеРеквизиты.Добавить();
		//        Стр.Свойство = ДопРеквизитСсылка;
		//	НаборДополнительныхРеквизитовКонтрагента.Записать();
		//    КонецЕсли;
		//
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ЕстьДопСведение;
КонецФункции // ПроверитьНаличиеСоздатьДопСвойство()

// Возвращает струтуру с параметрами доступа к API и прочими данными 
// требующимися для работы API
// например - токены авторизации    
// количество товаров получаемых за 1 раз и т.д.
//
// Параметры:
//  СсылкаНаОбъект  - Любая ссылка позволяющая хранить доп сведения - 
//
// Возвращаемое значение:
//   Структура   - Структура с параметрами 
//
&НаСервере
Функция ПолучитьСтруктуруПараметров(СсылкаНаОбъект) 
	
	СвойствоХраненияПараметров = ПолучитьСвойствоДляХраненияПараметров();
	СтрокаСоСтруктуройПараметров =  УправлениеСвойствами.ЗначениеСвойства(СсылкаНаОбъект, СвойствоХраненияПараметров);	
	Если ЗначениеЗаполнено(СтрокаСоСтруктуройПараметров) Тогда
		СтруктураПараметров = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаСоСтруктуройПараметров);
	Иначе
		СтруктураПараметров = Новый Структура; //Значение дополнительного свойство не определено
	КонецЕсли;
    Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметров()

// Устанавливает струтуру с параметрами доступа к API и прочими данными 
// требующимися для работы API
// например - токены авторизации    
// количество товаров получаемых за 1 раз и т.д.
// Параметры:
//  СсылкаНаОбъект    - Любая ссылка позволяющая хранить доп сведения - 
//  СтруктураПараметров      - Структура содержащая параметры
&НаСервере
Процедура УстановитьСтруктуруПараметров(СсылкаНаОбъект,СтруктураПараметров) Экспорт
	
////Проверим есть ли возможность установливать доп сведения для переданного объекта
//	Если УправлениеСвойствами.ИспользоватьДопСведения(СсылкаНаОбъект) Тогда 
//	//Получаем текущую структуру объекта
//		ТекущаяСтруктура = ПолучитьСтруктуруПараметров(СсылкаНаОбъект);
//	//Устанавливаем параметр	
//		ТекущаяСтруктура.Вставить(ИмяПараметра,ЗначениеПараметра);
//	//Сериализуем

	XMLСтрокаСтруктуры = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураПараметров); 

	ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
	ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство");
	ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
	
	СтрокаТаблицы = ТаблицаСвойствИЗначений.Добавить();
	
	СтрокаТаблицы.Свойство = ПолучитьСвойствоДляХраненияПараметров();
	СтрокаТаблицы.Значение = XMLСтрокаСтруктуры;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(СсылкаНаОбъект, ТаблицаСвойствИЗначений)
	
	//ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML)	
КонецПроцедуры // ПолучитьСтруктуруПараметров()

&НаКлиенте
Процедура ПолучитьЦеныТоваров(Команда)            
	МассивН = Новый Массив;
	МассивН.Добавить(СсылкаНаТовар);
	ПолучитьЦеныТоваровНаСервере(ВладелецКаталога,МассивН);
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  СсылкаВладелецКаталога  - СправочникСсылка.Партнеры - ссылка на элемент справочника соответствующий Элкому
//                 
//  МассивНоменклатур  - Массив 
//                       элементы СправочникСсылка.Номенклатура - ссылка на позицию номенклатуры  
//                 
// Возвращаемое значение:
//   Соответствие   - Ключ         Элемент СправочникСсылка.Номенклатура 
//                    Значение     Цена товара


&НаСервере
Функция ПолучитьЦеныТоваровНаСервере(СсылкаВладелецКаталога,МассивНоменклатур)
	
	СтруктураПараметров = ПолучитьТокенАвторизации(СсылкаВладелецКаталога); // Все данные передаются через структуру параметров
	
	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Соединение = Новый HTTPСоединение(
	    "online.el-com.ru", // сервер (хост)
	    443, // порт, по умолчанию для http используется 80, для https 443
	    , // пользователь для доступа к серверу (если он есть)
	    , // пароль для доступа к серверу (если он есть)
	    , // здесь указывается прокси, если он есть
	    , // таймаут в секундах, 0 или пусто - не устанавливать
	      Новый ЗащищенноеСоединениеOpenSSL()// защищенное соединение, если используется https
	);   
	Заголовки = Новый Соответствие; 
	Заголовки.Вставить("Authorization","Bearer "+СтруктураПараметров.Authorization);
	           
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
		|	НоменклатураКонтрагентов.КодНоменклатуры КАК syncUid
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Владелец = &СсылкаВладелецКаталога
		|	И НоменклатураКонтрагентов.Номенклатура В(&МассивНоменклатур)";
	
	Запрос.УстановитьПараметр("МассивНоменклатур", МассивНоменклатур);
	Запрос.УстановитьПараметр("СсылкаВладелецКаталога", СсылкаВладелецКаталога);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

	    //Тестовый реальный UID
		syncUid = "b88f9b26-096b-11eb-aa8e-005056b9d45c";
		//Запрос = Новый HTTPЗапрос("api/v1/product/"+syncUid, Заголовки);
		Запрос = Новый HTTPЗапрос("api/v1/product/"+ВыборкаДетальныеЗаписи.syncUid, Заголовки);
		ОтветHTTP = Соединение.Получить(Запрос);
		
		Если ОтветHTTP.КодСостояния <> 200 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
			
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ДанныеТовара = ПрочитатьJSON(ЧтениеJSON,Истина); //Структура содержащая данные каталога
		ЧтениеJSON.Закрыть();   
		СоответствиеНоменклатураЦена.Вставить(ВыборкаДетальныеЗаписи.Номенклатура,ПолучитьЦенуТовара(ДанныеТовара));
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат СоответствиеНоменклатураЦена;
	
	
КонецФункции    

// <Описание функции>
//
// Параметры:
//  СоответствиеДанныеТовара  - Соответствие - Результат разбора JSON
//
// Возвращаемое значение:
//   Число   - Цена товара для клиента
//
Функция ПолучитьЦенуТовара(СоответствиеДанныеТовара)
#Область ОбразецJSON
//{
//  "message": "Product Customer Breadcrumb Dto",
//  "success": true,
//  "errors": null,
//  "data": {
//    "product": {
//      "id": 871702,
//      "categoryId": 8008,
//      "categoryUid": "EC000167",
//      "categoryHeader": "Система для втягивания кабеля / Зонд для протяжки кабеля",
//      "header": "Протяжка-стеклопруток FGP-3.5/10K (кр) | 81811 | Fortisflex",
//      "fullHeader": "Протяжка-стеклопруток FGP-3.5/10K (кр) | 81811 | Fortisflex",
//      "barCode": null,
//      "articul": "81811",
//      "syncUid": "b88f9b26-096b-11eb-aa8e-005056b9d45c",
//      "catalogId": 9934,
//      "content": "Материал протяжки: стеклопруток в оболочке из полиэтилена.Цвет протяжки: красный.Тип наконечников: сменные винтовые наконечники из латуни с резьбой М5.Стеклопруток обеспечивает необходимую жесткость при проталкивании и прохождении заполненных каналов.Антифрикционная полиэтиленовая оболочка обеспечивает легкое скольжение и дополнительную защиту стеклопрутка.Идеальное сочетание гибкости и жесткости.Высокое усилие протяжки на разрыв.Диэлектрические свойства стекловолокна и полиэтилена гарантируют безопасную протяжку в каналах и трубах с кабелями, находящимися под напряжением.Легкая и прочная протяжка из стекловолокна не подвержена коррозии и обладает высоким усилием на разрыв.Винтовые наконечники позволяют производить быструю замену гибкой направляющей для проталкивания на заглушку-окно для тяжения кабелей.",
//      "description": "",
//      "price": 2040.21,
//      "priceRic": 0,
//      "commercePrice": {
//        "price": 1405.48,
//        "currency": "RUB",
//        "currencyCode": "643"
//      },
//      "prices": [
//        {
//          "price": 2266.9,
//          "currency": "Российский рубль",
//          "currencyCode": "643",
//          "header": "Тариф (прод.)",
//          "syncUid": "438bcce5-c3a2-11ea-aad6-005056803666"
//        },
//        {
//          "price": 2040.21,
//          "currency": "Российский рубль",
//          "currencyCode": "643",
//          "header": "Оптовая (прод.)",
//          "syncUid": "438bccee-c3a2-11ea-aad6-005056803666"
//        }
//      ],
//      "width": null,
//      "height": null,
//      "length": null,
//      "volume": 0.00713,
//      "weight": 0.9,
//      "unitHeader": "шт",
//      "terms": [],
//      "picture": "54/KQAyxVSUBv.JPG",
//      "pictures": [
//        "54/KQAyxVSUBv.JPG"
//      ],
//      "pictureUrls": [
//        "https://online.el-com.ru/pictures/800/54/KQAyxVSUBv.JPG"
//      ],
//      "manufacturerId": 2328,
//      "manufacturerHeader": "Fortisflex",
//      "manufacturerSeriesId": 21148,
//      "manufacturerSeriesHeader": "Протяжка-стеклопруток со сменными винтовыми наконечниками в пластиковой кассете FGP-3.5K",
//      "manufacturerSiteLink": "",
//      "updatedAt": null,
//      "multiplicityOrder": 1,
//      "multiplicitySupplier": 1,
//      "productStatusId": 4,
//      "features": [
//        {
//          "header": "",
//          "values": [
//            {
//              "header": "Область применения",
//              "code": "EF000101",
//              "value": "Прочее"
//            },
//            {
//              "header": "Материал",
//              "code": "EF002169",
//              "value": "Оптоволокно"
//            },
//            {
//              "header": "Вид/ марка материала",
//              "code": "EF001257",
//              "value": "Стеклопластик (GRP)"
//            },
//            {
//              "header": "Длина, mm",
//              "code": "EF001438",
//              "value": "10"
//            },
//            {
//              "header": "С закругленной головкой (шарообразным окончанием)",
//              "code": "EF001208",
//              "value": "true"
//            },
//            {
//              "header": "Форма головки",
//              "code": "EF000012",
//              "value": "Прочее"
//            },
//            {
//              "header": "Диаметр катушки/кольца, mm",
//              "code": "EF009468",
//              "value": "310"
//            },
//            {
//              "header": "Форма",
//              "code": "EF000051",
//              "value": "Круглый (-ая,-ое)"
//            },
//            {
//              "header": "Резьбовое соединение",
//              "code": "EF006479",
//              "value": "true"
//            },
//            {
//              "header": "Скрученный",
//              "code": "EF012121",
//              "value": "false"
//            }
//          ]
//        }
//      ],
//      "codes": [
//        {
//          "codeId": null,
//          "code": "elcom",
//          "header": "Код ЭЛКОМ",
//          "value": "ELC0000663458"
//        },
//        {
//          "codeId": null,
//          "code": "etm",
//          "header": "Код ЭТМ",
//          "value": ""
//        },
//        {
//          "codeId": null,
//          "code": "raec",
//          "header": "Код РАЭК",
//          "value": "2088684"
//        },
//        {
//          "codeId": null,
//          "code": "manufacturer",
//          "header": "Код производителя",
//          "value": "81811"
//        },
//        {
//          "codeId": null,
//          "code": "pc",
//          "header": "Код PC",
//          "value": "1583096"
//        }
//      ],
//      "params": null,
//      "flatCodes": {
//        "pc": "1583096",
//        "raec": "2088684",
//        "elcom": "ELC0000663458",
//        "etm": "",
//        "manufacturer": "81811"
//      },
//      "videos": [
//        {
//          "header": null,
//          "link": "https://www.youtube.com/watch?v=xyfdRXBddJs",
//          "code": "xyfdRXBddJs"
//        }
//      ],
//      "analogList": [],
//      "relatedList": [],
//      "analogCount": 0,
//      "relatedCount": 0,
//      "certificateList": [],
//      "stocks": [
//        {
//          "warehouseId": 73,
//          "warehouseHeader": "МКПП",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 96,
//          "warehouseHeader": "Не использовать Склад ОТХ Алюр",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 91,
//          "warehouseHeader": "Не использовать Склад \"Москабель\" ЦБ",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 99,
//          "warehouseHeader": "Не использовать Склад ОТХ \"Конкорд\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 69,
//          "warehouseHeader": "Поставщик",
//          "quantity": 102
//        },
//        {
//          "warehouseId": 75,
//          "warehouseHeader": "М-1 (бар)",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 74,
//          "warehouseHeader": "М-4 (эл) Новый",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 93,
//          "warehouseHeader": "Не использовать Склад \"Ункомтех\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 90,
//          "warehouseHeader": "Не использовать Склад \"Угличкабель\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 92,
//          "warehouseHeader": "Не использовать Склад \"Камский кабель\" ЦБ",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 97,
//          "warehouseHeader": "Не использовать Склад ОТХ \"Элкаб\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 100,
//          "warehouseHeader": "Не использовать Склад ОТХ \"Спецкабель\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 95,
//          "warehouseHeader": "Не использовать ОТХ - СКТ Групп",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 78,
//          "warehouseHeader": "М-4 (эл)",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 84,
//          "warehouseHeader": "П-ЭиС",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 76,
//          "warehouseHeader": "М-2 (бар) единственный",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 94,
//          "warehouseHeader": "Не использовать Склад \"Электро Системы\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 77,
//          "warehouseHeader": "М-3 (бух)",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 98,
//          "warehouseHeader": "Не использовать Склад ОТХ \"Экокабель\"",
//          "quantity": 0
//        },
//        {
//          "warehouseId": 83,
//          "warehouseHeader": "П-КПП",
//          "quantity": 0
//        }
//      ],
//      "documentList": [
//        {
//          "url": "http://catalog.raec.su/uploads/media/files/605/605d1c19bba56a4261776ea045ae2023.pdf",
//          "size": "3799018",
//          "mimeType": "application/pdf",
//          "header": "Отказное письмо"
//        }
//      ],
//      "balancesOnGroupsOfWarehouses": {
//        "90": 102,
//        "111": 0,
//        "113": 0,
//        "119": 0
//      },
//      "markers": [],
//      "supplyTerm": null,
//      "warranty": null,
//      "catalogOfAnalog": [],
//      "availabilityOnGroupsOfWarehouses": null,
//      "enabled": true,
//      "nextArrival": null,
//      "packs": [
//        {
//          "header": "Москва",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "Смоленск",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "Поставщик",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": [
//            {
//              "syncUid": "e70dfffa-dddd-43ad-9554-a97309248899",
//              "header": "Поставщик",
//              "stock": 102,
//              "deliveryDays": 0
//            }
//          ]
//        },
//        {
//          "header": "Крым",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "Самара",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "Краснодар",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "Тарасовка",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "ОТХ",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        },
//        {
//          "header": "Поставщик",
//          "freeStock": null,
//          "productPacks": null,
//          "warehouseList": []
//        },
//        {
//          "header": "Санкт-Петербург",
//          "freeStock": 0,
//          "productPacks": [],
//          "warehouseList": []
//        }
//      ]
//    },
//    "catalogBreadcrumbs": [
//      {
//        "id": 9536,
//        "header": "2. Электротехническая продукция"
//      },
//      {
//        "id": 9699,
//        "header": "Изделия для монтажа и опрессовки кабеля"
//      },
//      {
//        "id": 10016,
//        "header": "Устройства для протяжки и размотки кабеля"
//      },
//      {
//        "id": 9934,
//        "header": "Протяжки для кабеля"
//      }
//    ]
//  }
//}
//	
#КонецОбласти

	_data           = СоответствиеДанныеТовара.Получить("data"); //Тип - Соответствие 
	_product  		= _data.Получить("product"); //Тип - Соответствие 
 	_commercePrice  = _product.Получить("commercePrice"); //Тип - Соответствие 
	_price          = _commercePrice.Получить("price");//Тип - Число
	Возврат _price;     
	
	//Пример для отладки
	//СоответствиеДанныеТовара.Получить("data").Получить("product").Получить("commercePrice").Получить("price");	
 КонецФункции // ПолучитьЦенуТовара()


	
#КонецОбласти