
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Заголовок", "Выберите файл XML");
	НастройкиДиалога.Вставить("Фильтр", "Файл XML (*.xml)");
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(ЭтотОбъект, "ПутьКФайлу", СтандартнаяОбработка, НастройкиДиалога);
	
	
КонецПроцедуры


&НаСервере
// Возвращает структуру для дальнейшего заполнения элементов справочника "НоменклатураПоставщика"
//
//
// Возвращаемое значение:
//   Структура   - Структура реквизитов
//
Функция СтруктураСправочникаНоменклатураКонтрагентов()

	СтруктураРеквизитов = Новый Структура;
	
	МДОбъекта=Метаданные.Справочники.НоменклатураКонтрагентов;
	
	Для Каждого ТекРеквизит Из МДОбъекта.СтандартныеРеквизиты Цикл 
		Если ТекРеквизит.Имя = "Код" Тогда  
			//Исключаемые реквизиты
			Продолжить;	
		КонецЕсли;
		СтруктураРеквизитов.Вставить(ТекРеквизит.Имя)
	КонецЦикла;    

	Для Каждого ТекРеквизит Из МДОбъекта.Реквизиты Цикл
		СтруктураРеквизитов.Вставить(ТекРеквизит.Имя)
	КонецЦикла;    
	
	СтруктураРеквизитов.Вставить("ДанныеXML");//XML описание от поставщика
	
	Возврат СтруктураРеквизитов

КонецФункции // СтруктураСправочникаНоменклатураКонтрагентов()

&НаСервере
Функция ПолучитьXMLСтрокуИзXDTO(ДанныеXDTOПакета)
	// Создание объекта ЗаписьXML
	ЗаписьXML = Новый ЗаписьXML;
	// Указываем, что запись производится в строку, а не в файл
	ЗаписьXML.УстановитьСтроку();
	// При помощи объекта ФабрикаXDTO записываем данные пакета XDTO в запись XML
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДанныеXDTOПакета);
	// Получаем текст записи XML
	ТекстОбъектаXDTO = ЗаписьXML.Закрыть();
	
	Возврат ТекстОбъектаXDTO;
	
КонецФункции


// Ищет группу (Родитель) Элемента номенклатуры
//
// Параметры:
//  ДанныеТовара  - ОбъектXDTO - Содержит данные товара
//                 
//  ВладелецКаталога  - СправочникСсылка.Партнеры - кому подчинен товар
//
// Возвращаемое значение:
//   СправочникСсылка.НоменклатураКонтрагентов   - Ссылка на родителя
//
Функция ПолучитьРодителяЭлемента(ДанныеКаталога,ВладелецКаталога)
	МассивВложенныхГрупп = Новый Массив;
	
	Для Каждого Свойство Из ДанныеКаталога.Свойства() Цикл
		Если СтрНайти(Свойство.Имя,"Name") >0 Тогда  
			Если ТипЗнч(ДанныеКаталога[Свойство.Имя]) = Тип("Строка") Тогда
				МассивВложенныхГрупп.Вставить(0,ДанныеКаталога[Свойство.Имя]);//В обратном порядке развернем группы
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаРодитель = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	Для Каждого ЭлементМассиваГруппаСтрокой Из МассивВложенныхГрупп Цикл
		СсылкаНаГруппуНоменклатураКонтрагентов = 
		Справочники.НоменклатураКонтрагентов.
						НайтиПоНаименованию(ЭлементМассиваГруппаСтрокой,
											Истина,
											ГруппаРодитель,
											Поставщик); 
		Если НЕ ЗначениеЗаполнено(СсылкаНаГруппуНоменклатураКонтрагентов) Тогда //Нет такой группы	
			НовыйОбъектГруппа  = Справочники.НоменклатураКонтрагентов.СоздатьГруппу();
			НовыйОбъектГруппа.Владелец = ВладелецКаталога;
			НовыйОбъектГруппа.Наименование = ЭлементМассиваГруппаСтрокой;
			НовыйОбъектГруппа.Родитель = ГруппаРодитель; 
			НовыйОбъектГруппа.Записать();
			СсылкаНаГруппуНоменклатураКонтрагентов = НовыйОбъектГруппа.Ссылка;
		КонецЕсли;
		ГруппаРодитель = СсылкаНаГруппуНоменклатураКонтрагентов; //
	КонецЦикла;
    Возврат СсылкаНаГруппуНоменклатураКонтрагентов; //Возвращаем группу самого нижнего уровня
КонецФункции // ПолучитьДобавитьРодителяИГруппы()

// <Описание функции>
//
// Возвращаемое значение:
//   Структура   - Структура полей ETIM
//           
//<FeatureCode>Внутр. имя характеристики ETIM</FeatureCode> //Код ETIM 
//<FeatureName>Характеристика ETIM</FeatureName> Наименование характеристики ETIM
//<FeatureValue>Значение характеристики ETIM</FeatureValue> Значение характеристики ETIM
//<FeatureUom>ЕИ характеристики ETIM</FeatureUom> ЕИ характеристики ETIM
Функция СтруктураХарактеристикиETIM() 
	
    СтруктураETIM = Новый Структура;
	СтруктураETIM.Вставить("FeatureCode");
	СтруктураETIM.Вставить("FeatureName");
	СтруктураETIM.Вставить("FeatureValue");
	СтруктураETIM.Вставить("FeatureUom");
	
    Возврат СтруктураETIM;
КонецФункции // СтруктураХарактеристикаETIM()

// <Описание функции>
//
// Возвращаемое значение:
//   Структура   - Структура полей ETIM
//           
//<FeatureCode>Внутр. имя характеристики ETIM</FeatureCode> //Код ETIM 
//<FeatureName>Характеристика ETIM</FeatureName> Наименование характеристики ETIM
//<FeatureValue>Значение характеристики ETIM</FeatureValue> Значение характеристики ETIM
//<FeatureUom>ЕИ характеристики ETIM</FeatureUom> ЕИ характеристики ETIM
Функция ТаблицаЗначенийХарактеристикиETIM() 
	
    ТаблицаETIM = Новый ТаблицаЗначений;
	ТаблицаETIM.Колонки.Добавить("FeatureCode",	Новый ОписаниеТипов("Строка"),"FeatureCode");
	ТаблицаETIM.Колонки.Добавить("FeatureName",	Новый ОписаниеТипов("Строка"),"FeatureName");
	ТаблицаETIM.Колонки.Добавить("FeatureValue",Новый ОписаниеТипов("Строка"),"FeatureValue");
	ТаблицаETIM.Колонки.Добавить("FeatureUom",	Новый ОписаниеТипов("Строка"),"FeatureUom");
	
    Возврат ТаблицаETIM;
КонецФункции // СтруктураХарактеристикаETIM()


&НаСервере
// Заполняет РегистрСведений.АпиЭ_СоответствиеЗначенийРеквизитов 
// найденными реквизитами и их значениями при разборе XML 
// чтобы можно было сопоставить их со значениями в базе
//
//
// Параметры:
//  FeatureETIMDetails  - ОбъектXDTO - Содержит реквизиты номенклатуры для добавления в регистр
//                 
Процедура ДобавитьРеквизитыНоменклатурыРС(FeatureETIMDetails) 
	
//Через таблицу значений
	ТаблицаETIM = ТаблицаЗначенийХарактеристикиETIM();          
	Если ТипЗнч(FeatureETIMDetails.FeatureETIM) = Тип("СписокXDTO") Тогда
	    //Если есть дополнительные реквизиты 
		Для Каждого FeatureETIM  Из FeatureETIMDetails.FeatureETIM Цикл
			СтруктураETIM 				= ТаблицаETIM.Добавить();
			СтруктураETIM.FeatureCode 	= FeatureETIM.FeatureCode;
			СтруктураETIM.FeatureName 	= FeatureETIM.FeatureName;
			СтруктураETIM.FeatureValue 	= ?(ТипЗнч(FeatureETIM.FeatureValue) = Тип("Строка"),FeatureETIM.FeatureValue,"");
			//Единица может быть пустой
			СтруктураETIM.FeatureUom 	= ?(ТипЗнч(FeatureETIM.FeatureUom) = Тип("Строка"),FeatureETIM.FeatureUom,"");
		КонецЦикла;

		ТаблицаETIM.Свернуть("FeatureCode,FeatureName,FeatureValue,FeatureUom");
	ИначеЕсли ТипЗнч(FeatureETIMDetails.FeatureETIM) = Тип("ОбъектXDTO") Тогда   //Свойство только одно
			СтруктураETIM 				= ТаблицаETIM.Добавить();
			СтруктураETIM.FeatureCode 	= FeatureETIM.FeatureCode;
			СтруктураETIM.FeatureName 	= FeatureETIM.FeatureName;
			СтруктураETIM.FeatureValue 	= ?(ТипЗнч(FeatureETIM.FeatureValue) = Тип("Строка"),FeatureETIM.FeatureValue,"");
			СтруктураETIM.FeatureUom 	= ?(ТипЗнч(FeatureETIM.FeatureUom) = Тип("Строка"),FeatureETIM.FeatureUom,"");
	Иначе
		НетРеквизитов = Истина;
	КонецЕсли;
		
	Для Каждого ХарактеристикаETIM из ТаблицаETIM Цикл
		Запись = РегистрыСведений.АпиЭ_СоответствиеЗначенийРеквизитов.СоздатьМенеджерЗаписи();
		Запись.FeatureCode 	= ХарактеристикаETIM.FeatureCode;
		Запись.FeatureValue = ХарактеристикаETIM.FeatureValue;
		Запись.Прочитать();
		Если НЕ Запись.Выбран() Тогда
			Запись.FeatureCode 	= ХарактеристикаETIM.FeatureCode;
			Запись.FeatureName = ХарактеристикаETIM.FeatureName; 
			Запись.FeatureValue = ХарактеристикаETIM.FeatureValue;
			Запись.FeatureUom 	= ХарактеристикаETIM.FeatureUom;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьРеквизитНоменклатурыРС()

&НаСервере
Процедура ПрочитатьФайлХМЛНаСервере() 
//Схема загрузки 
//Сначала грузим в справочник e1cib/list/Справочник.НоменклатураКонтрагентов
//Затем сопоставляем не сопоставленную и заполняем реквизиты номенклатуры
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	РезультатРазборки = Новый Массив; 
	
	ПродатРусскийСвет = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Для каждого ДокДетайл Из ПродатРусскийСвет.DocDetail Цикл

		СтруктураНоменклатураКонтрагентов = СтруктураСправочникаНоменклатураКонтрагентов(); 
		
//Стандартные реквизиты
		СтруктураНоменклатураКонтрагентов.Владелец			 			= Поставщик; //Владелец номенклатуры, подчинен элементу другого справочника
		СтруктураНоменклатураКонтрагентов.Наименование 					= ДокДетайл.ProductName;

//Реквизиты
		СтруктураНоменклатураКонтрагентов.Артикул						= ДокДетайл.VendorProdNum;
		СтруктураНоменклатураКонтрагентов.ВладелецНоменклатуры 			= Поставщик; //Поставщик номенклатуры
		СтруктураНоменклатураКонтрагентов.Родитель						= ПолучитьРодителяЭлемента(ДокДетайл.RsCatalog,Поставщик); //Данные групп

		//СтруктураНоменклатураКонтрагентов.ДругиеШтрихкодыНоменклатурыСтрокой

		//СтруктураНоменклатураКонтрагентов.ИдентификаторНоменклатурыСервиса
		//СтруктураНоменклатураКонтрагентов.ИдентификаторУпаковки
		//СтруктураНоменклатураКонтрагентов.ИдентификаторХарактеристики
		//СтруктураНоменклатураКонтрагентов.ИдентификаторХарактеристикиСервиса
		//СтруктураНоменклатураКонтрагентов.ИспользоватьХарактеристики
		СтруктураНоменклатураКонтрагентов.КодНоменклатуры 				= ДокДетайл.SenderPrdCode; //Код номенклатуры поставщика 
		СтруктураНоменклатураКонтрагентов.КодОКЕИБазовойЕдиницыИзмерения = ДокДетайл.UOM;
		//СтруктураНоменклатураКонтрагентов.КодПоКТРУ
		//СтруктураНоменклатураКонтрагентов.КодТНВЭД
		//СтруктураНоменклатураКонтрагентов.КоличествоБазовойЕдиницыИзмерения
		//СтруктураНоменклатураКонтрагентов.КоличествоУпаковок
		//СтруктураНоменклатураКонтрагентов.МаркируемыйТовар
		//СтруктураНоменклатураКонтрагентов.НаименованиеБазовойЕдиницыИзмерения
		СтруктураНоменклатураКонтрагентов.НаименованиеНоменклатуры 		= ДокДетайл.ProductName;
		СтруктураНоменклатураКонтрагентов.НаименованиеПолное			= ДокДетайл.ProductName;	
		//СтруктураНоменклатураКонтрагентов.НаименованиеУпаковки
		//СтруктураНоменклатураКонтрагентов.НаименованиеХарактеристики	= "";
		СтруктураНоменклатураКонтрагентов.Недействителен  				= Ложь;
		//СтруктураНоменклатураКонтрагентов.Номенклатура
		//СтруктураНоменклатураКонтрагентов.ПрослеживаемыйТовар
		//СтруктураНоменклатураКонтрагентов.СтавкаНДС
		//СтруктураНоменклатураКонтрагентов.СтранаПроисхожденияКод		= ДокДетайл.Country.Value;
		//СтруктураНоменклатураКонтрагентов.ТипНоменклатурыФНС
		//СтруктураНоменклатураКонтрагентов.Упаковка
		//СтруктураНоменклатураКонтрагентов.Характеристика
		//СтруктураНоменклатураКонтрагентов.ХешПравилаПоиска
		//СтруктураНоменклатураКонтрагентов.Штрихкод					= ДокДетайл.
		СтруктураНоменклатураКонтрагентов.ИдентификаторНоменклатуры 	= СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(
				СтруктураНоменклатураКонтрагентов.НаименованиеНоменклатуры, 300);
		СтруктураНоменклатураКонтрагентов.Идентификатор  				= 
						СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке
						(Строка(СтруктураНоменклатураКонтрагентов.НаименованиеНоменклатуры) + "#" 
						+ Строка(СтруктураНоменклатураКонтрагентов.НаименованиеХарактеристики) + "#" 
						+ Строка(СтруктураНоменклатураКонтрагентов.НаименованиеУпаковки), 300);

		
		//СтруктураНоменклатураКонтрагентов.ДанныеXML = ПолучитьXMLСтрокуИзXDTO(ДокДетайл);
		СтруктураНоменклатураКонтрагентов.ДанныеXML = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ДокДетайл);
		
	    РезультатРазборки.Добавить(СтруктураНоменклатураКонтрагентов);
		
		ДобавитьРеквизитыНоменклатурыРС(ДокДетайл.FeatureETIMDetails); //Добавим в регистр сведений Технические характеристики в формате ETIM
		//Чтобы все данные не грузить
		//Если РезультатРазборки.Количество()>9 Тогда
		//	Прервать;
		//КонецЕсли;
	КонецЦикла;  
	
	Для каждого ТоварПоставщика из РезультатРазборки Цикл
		СсылкаНоменклатураПоставщика =  Справочники.НоменклатураКонтрагентов.НайтиПоРеквизиту("КодНоменклатуры",ТоварПоставщика.КодНоменклатуры);
		
		Если ЗначениеЗаполнено(СсылкаНоменклатураПоставщика) Тогда
			ОбъектНоменклатураПоставщика = СсылкаНоменклатураПоставщика.ПолучитьОбъект();
		Иначе
			ОбъектНоменклатураПоставщика = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
			ОбъектНоменклатураПоставщика.УстановитьНовыйКод();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектНоменклатураПоставщика,ТоварПоставщика);
		ОбъектНоменклатураПоставщика.ОбменДанными.Загрузка = Истина;           
		ОбъектНоменклатураПоставщика.Записать(); 
		СсылкаНаСозданныйНайденныйЭлементНоменклатурыПоставщика = ОбъектНоменклатураПоставщика.Ссылка;
		
	//Прикрепим XML к номенклатуре	
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТоварПоставщика.ДанныеXML);
		
		Попытка
		
			ФайлыВладельца = РаботаСФайламиСлужебныйВызовСервера.КоличествоПрисоединенныхФайлов(СсылкаНаСозданныйНайденныйЭлементНоменклатурыПоставщика,Истина,); 
			Если ФайлыВладельца.КоличествоФайлов>0 Тогда

				// Обновляем данные XML.
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресВоВременномХранилище);
				ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста");
				РаботаСФайлами.ОбновитьФайл(ФайлыВладельца.ДанныеФайла.Ссылка, ПараметрыФайла);
			
			Иначе
				ПараметрыЗаписиФайла = РаботаСФайлами.ПараметрыДобавленияФайла(); 
				ПараметрыЗаписиФайла.ВладелецФайлов              = СсылкаНаСозданныйНайденныйЭлементНоменклатурыПоставщика;
				ПараметрыЗаписиФайла.ИмяБезРасширения            = СтрШаблон("%1_%2", "ДанныеXML_" ,ТоварПоставщика.КодНоменклатуры);
				ПараметрыЗаписиФайла.РасширениеБезТочки          = "XML";
				ПараметрыЗаписиФайла.ВремяИзмененияУниверсальное = Неопределено;
				СозданныйПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				                                    ПараметрыЗаписиФайла,
				                                    АдресВоВременномХранилище,
				                                    "");
			КонецЕсли; 
		
		Исключение
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			//Возврат РезультатСоздания;
			
		КонецПопытки;

	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлХМЛ(Команда)
	ПрочитатьФайлХМЛНаСервере();
КонецПроцедуры
