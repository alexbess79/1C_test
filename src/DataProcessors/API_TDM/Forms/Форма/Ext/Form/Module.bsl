// Документация находится по адресу:
//  https://api-lk.tdme.ru/
//Процедуры и функции для обращения к API TDM
//после отладки перенести в модуль обработки  
//

#Область ОбработчикиКнопок

&НаКлиенте
Процедура ПолучитьКаталог(Команда)
	ЗагрузитьСписокКатегорий(Партнер); 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПозицииСПагинацией(Команда)
	ПолучитьПозицииСПагинациейНаСервере(Партнер);
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ПолучитьИнформациюПоТоваруНаСервере()
	// Вставить содержимое обработчика. 
	ДанныеПоТовару = ПолучитьТехническиеХарактеристикиПродукта(ID_товара);
	Если ДанныеПоТовару = Неопределено Тогда
	Иначе
		п =5;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИнформациюПоТовару(Команда)
	ПолучитьИнформациюПоТоваруНаСервере();
КонецПроцедуры


#Область APITDME

#Область Categories  

// /api/categories Функция для получения всего списка категорий
//Загружает/обновляет элементы групп справочника Номенклатура контрагентов 
//  Categories - в терминах TDM
// Параметры:
// СсылкаВладелецКаталога  - Справочник.Партнеры - партнер кому грузим группы
//
&НаСервере
Процедура ЗагрузитьСписокКатегорий(СсылкаВладелецКаталога)
	path = "/api/categories"; //Путь API
	
	ОтветHTTP = ПолучитьHTTPСоединение().Получить(ПолучитьHTTPЗапрос(path));
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		Возврат; //Нечего грузить
	КонецЕсли;	                 
	
	СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ДанныеКаталога = ПрочитатьJSON(ЧтениеJSON); //Структура содержащая данные каталога
	ЧтениеJSON.Закрыть();
	
	МассивДляПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКаталога);
	//У нас Массив Структур содержащих данные каталога
	Для каждого ГруппаНоменклатуры Из ДанныеКаталога Цикл
		
		СсылкаНаГруппуНоменклатураКонтрагентов = 
		Справочники.НоменклатураКонтрагентов.
						НайтиПоКоду(СтрокаID(ГруппаНоменклатуры.id),
									,
									,
									СсылкаВладелецКаталога); 
									
									
		Если ЗначениеЗаполнено(СсылкаНаГруппуНоменклатураКонтрагентов) Тогда   
										
			//Если нужно вставить код обновления
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(ГруппаНоменклатуры.parent_id) Тогда //Подчиненная группа
			ГруппаРодитель = 
			Справочники.НоменклатураКонтрагентов.
							НайтиПоКоду(СтрокаID(ГруппаНоменклатуры.parent_id),
										,
										,
										СсылкаВладелецКаталога);
										
			Если Не ЗначениеЗаполнено(ГруппаРодитель) Тогда							
				//Это дочерний каталог
				УровеньРекурсии = 0;
				ГруппаРодитель =
		    	СоздатьПодчиненныеГруппыНоменклатуры(МассивДляПоиска,ГруппаНоменклатуры.parent_id,СсылкаВладелецКаталога,УровеньРекурсии);
			КонецЕсли;
		Иначе //Это каталог первого уровня, создаем его
			ГруппаРодитель = Справочники.НоменклатураКонтрагентов.ПустаяСсылка(); 
		КонецЕсли;
		НовыйОбъектГруппа  = Справочники.НоменклатураКонтрагентов.СоздатьГруппу();
		НовыйОбъектГруппа.Владелец = СсылкаВладелецКаталога;
		НовыйОбъектГруппа.Код = СтрокаID(ГруппаНоменклатуры.id);
		НовыйОбъектГруппа.Наименование = ГруппаНоменклатуры.name;
		НовыйОбъектГруппа.Родитель = ГруппаРодитель; 
		НовыйОбъектГруппа.Записать();
	КонецЦикла;

КонецПроцедуры // ЗагрузитьСписокКатегорий()

#КонецОбласти


#Область Product

// Загружает артикулы в справочник Номенклатура контрагентов path = "/api/product_list"
//
// Параметры:
// СсылкаВладелецКаталога  - Справочник.Партнеры - партнер кому грузим артикула
//
&НаСервере
Процедура ПолучитьПозицииСПагинациейНаСервере(СсылкаВладелецКаталога)
	
	//path = "/api/product_list?per_page=5"; //Путь API      Планы видов характеристик
	//path = "/api/product_list?per_page=15"; //Путь API     15 позиций
	path = "/api/product_list"; //Путь API     100 позиций
	
	_current_page = 1;
	_last_page    = 2;
	Пока _current_page<(_last_page) Цикл  
		
		ОтветHTTP = ПолучитьHTTPСоединение().Получить(ПолучитьHTTPЗапрос(path));
		Если ОтветHTTP.КодСостояния <> 200 Тогда
			Возврат; //Нечего грузить
		КонецЕсли;	                 
		
		СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
			
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ДанныеНавигации = ПрочитатьJSON(ЧтениеJSON); //Структура данные навигации
		ЧтениеJSON.Закрыть();
		
		path = PathFromUrl(ДанныеНавигации.next_page_url); //Путь к следующей странице
		
		_current_page = ДанныеНавигации.current_page;
		_last_page = ДанныеНавигации.last_page;
		
		ДанныеКаталога = ДанныеНавигации.data;
		Если ДобавитьОбновитьПозиции Тогда
		
			ДобавитьОбновитьПозицииНаСервере(ДанныеКаталога,СсылкаВладелецКаталога);
		
		КонецЕсли;
		
		Если ЗаполнитьСправочникETIM Тогда
		
			ЗаполнитьСправочникETIM(ДанныеКаталога);
		
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // ПолучитьПозицииСПагинациейНаСервере()

// Добавляет/обновляет позиции Номенклатуры по полученным от поставщика 
//
// Параметры:
//  ДанныеКаталог  - массив - то что получили по API
//                 
&НаСервере
Процедура ДобавитьОбновитьПозицииНаСервере(ДанныеКаталога,СсылкаВладелецКаталога)

		Для Каждого ПозицияНоменклатуры из ДанныеКаталога Цикл 
			СсылкаНаЭлементКонтрагентов = 
				Справочники.НоменклатураКонтрагентов.
								НайтиПоРеквизиту("КодНоменклатуры",
											      СтрокаID(ПозицияНоменклатуры.id),
											      ,
												  СсылкаВладелецКаталога);
			
			Если ЗначениеЗаполнено(СсылкаНаЭлементКонтрагентов) Тогда
				НовыйОбъект  			= СсылкаНаЭлементКонтрагентов.ПолучитьОбъект();
				Продолжить;//Элемент есть	
			Иначе
				НовыйОбъект  			= Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
				НовыйОбъект.УстановитьНовыйКод("T");
				
			КонецЕсли; 
			
			//Получим ссылку на категория (группу) номенклатуры
			СсылкаНаГруппуНоменклатураКонтрагентов = 
			Справочники.НоменклатураКонтрагентов.
							НайтиПоКоду(СтрокаID(ПозицияНоменклатуры.categories[0].id),
										,
										,
										СсылкаВладелецКаталога);
			Если ЗначениеЗаполнено(СсылкаНаГруппуНоменклатураКонтрагентов) Тогда 
				//НовыйОбъект  			= Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
				НовыйОбъект.Владелец 	= СсылкаВладелецКаталога;
				НовыйОбъект.ВладелецНоменклатуры 	= СсылкаВладелецКаталога;	
				НовыйОбъект.КодНоменклатуры = СтрокаID(ПозицияНоменклатуры.id);
				НовыйОбъект.Наименование =  ПозицияНоменклатуры.name;          
				НовыйОбъект.НаименованиеПолное =  ПозицияНоменклатуры.name; 
				НовыйОбъект.НаименованиеНоменклатуры = ПозицияНоменклатуры.name;
				НовыйОбъект.Артикул = ПозицияНоменклатуры.sku;
				НовыйОбъект.ИдентификаторНоменклатуры 	= СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоСтроке(
									Строка(НовыйОбъект.НаименованиеНоменклатуры) + "#" 
									+ Строка(НовыйОбъект.НаименованиеХарактеристики) + "#" 
									+ Строка(НовыйОбъект.НаименованиеУпаковки), 300);
				
				НовыйОбъект.Родитель = СсылкаНаГруппуНоменклатураКонтрагентов;
				Попытка 
					НовыйОбъект.ОбменДанными.Загрузка = Истина;           
					НовыйОбъект.Записать();
				Исключение
					_ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки
			КонецЕсли;								
									
		КонецЦикла;

КонецПроцедуры // ДобавитьОбновитьПозицииНаСервере()



// Заполняет данными справочник ETIM классы
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьСправочникETIM(ДанныеКаталога)
	
	Для Каждого ПозицияНоменклатуры из ДанныеКаталога Цикл

		Если СтрПодобнаПоРегулярномуВыражению(ПозицияНоменклатуры.etim,"EC([0-9]{6})",Истина) Тогда
		Иначе
		//Пропускаем все позиции у которых код не по шаблону EC123456
			Продолжить;
		КонецЕсли;
		
		СсылкаНаЭлементКонтрагентов = 
		Справочники.ETIM_Clasess.
		НайтиПоРеквизиту("ETIM_code",
		ПозицияНоменклатуры.etim,
		,
		);
		Если ЗначениеЗаполнено(СсылкаНаЭлементКонтрагентов) Тогда
			НовыйОбъект  			= СсылкаНаЭлементКонтрагентов.ПолучитьОбъект();
			Продолжить;//Элемент есть	
		Иначе
			НовыйОбъект  			= Справочники.ETIM_Clasess.СоздатьЭлемент();
			НовыйОбъект.УстановитьНовыйКод("T");
			НовыйОбъект.ETIM_code = ПозицияНоменклатуры.etim; 
		КонецЕсли;

		Попытка 
			НовыйОбъект.ОбменДанными.Загрузка = Истина;           
			НовыйОбъект.Записать();
		Исключение
			_ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки

		
	КонецЦикла;
КонецПроцедуры // ЗаполнитьСправочникETIM()


//Функция для получения подробной информации по товару api/product_list/{id} 
//
// Параметры:
//  id  		- Строка - id / sku товара
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьПодробнуюИнформациюПоТовару(id)
   	//  примет запросаhttps://api-lk.tdme.ru/api/product_list/5 
	
	path = "/api/product_list/"+id; //Путь API     
	
	ОтветHTTP = ПолучитьHTTPСоединение().Получить(ПолучитьHTTPЗапрос(path));
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		Возврат Неопределено; //ID не
	КонецЕсли;	                 
	
	СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ДанныеПоТовару = ПрочитатьJSON(ЧтениеJSON); //Структура данные навигации
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеПоТовару;
КонецФункции // ПолучитьПодробнуюИнформациюПоТовару()

// Получить технические характеристикиПродукта  /api/product_list/{SKU}/params
//
// Параметры:
//  id  		- Строка - id / sku товара
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьТехническиеХарактеристикиПродукта(ID)
                                                       
	path = "/api/product_list/&ID/params"; //Путь API     
	path = СтрЗаменить(path,"&ID",ID);
	
	ОтветHTTP = ПолучитьHTTPСоединение().Получить(ПолучитьHTTPЗапрос(path));
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		Возврат Неопределено; //ID не
	КонецЕсли;	                 
	
	СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ДанныеПоТовару = ПрочитатьJSON(ЧтениеJSON); //Структура данные навигации
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеПоТовару;

КонецФункции // ПолучитьТехническиеХарактеристикиПродукт()


#КонецОбласти

#КонецОбласти


#Область Stocks

#КонецОбласти

#Область Passports

#КонецОбласти

#Область Images

#КонецОбласти


#Область ЗагрузкаКатегорий


&НаСервере
Функция СоздатьПодчиненныеГруппыНоменклатуры(МассивДляПоиска,id_НовойГруппы,СсылкаВладелецКаталога,УровеньРекурсии)
	
	Если УровеньРекурсии>20 Тогда //Каталогов с такой глубиной нет.
		Возврат Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	Иначе
		УровеньРекурсии = УровеньРекурсии + 1;
	КонецЕсли;  
	

	Для Каждого ГруппаНоменклатуры Из МассивДляПоиска Цикл 

		Если ГруппаНоменклатуры.id =  id_НовойГруппы Тогда //Нашли группу с таким ID 
									
			Если ЗначениеЗаполнено(ГруппаНоменклатуры.parent_id) Тогда //Подчиненная группа
				ГруппаРодитель = 
				Справочники.НоменклатураКонтрагентов.НайтиПоКоду(СтрокаID(ГруппаНоменклатуры.parent_id),
											,
											,
											СсылкаВладелецКаталога);
											
				Если ЗначениеЗаполнено(ГруппаРодитель) Тогда
					Возврат ГруппаРодитель;
				Иначе	
					//Это дочерний каталог
			    	ГруппаРодитель = СоздатьПодчиненныеГруппыНоменклатуры(МассивДляПоиска,ГруппаНоменклатуры.parent_id,СсылкаВладелецКаталога,УровеньРекурсии);
				КонецЕсли;
			Иначе //Это каталог первого уровня, создаем его
				ГруппаРодитель = Справочники.НоменклатураКонтрагентов.ПустаяСсылка(); 
			КонецЕсли;
			
			НовыйОбъектГруппа  = Справочники.НоменклатураКонтрагентов.СоздатьГруппу();
			НовыйОбъектГруппа.Владелец = СсылкаВладелецКаталога;
			НовыйОбъектГруппа.Код = СтрокаID(id_НовойГруппы);
			НовыйОбъектГруппа.Наименование = ГруппаНоменклатуры.name;
			НовыйОбъектГруппа.Родитель = ГруппаРодитель; 
			НовыйОбъектГруппа.Записать();
			Возврат НовыйОбъектГруппа.Ссылка;
		КонецЕсли;
			

	КонецЦикла;
	

КонецФункции // СоздатьПодчиненныеГруппыНоменклатуры()
#КонецОбласти

#Область ОбщиеФункции

// Приводит числовой ID к строке без пробелов
//
// Параметры:
//  ID  - Число 
//
// Возвращаемое значение:
//   Строка   - ID без пробелов
//
&НаСервере
Функция СтрокаID(ID)
    //Делает строку без пробелов ID
	Возврат Формат(ID,"ЧГ=0");	

КонецФункции // СтрокаID()

// Возвращает path для Http запроса из переданого URL
//
// Параметры:
//  URL  - Строка - откуда надо извлечь путь для HTTP запроса
//                 
// Возвращаемое значение:
//   Строка   -  path для HTTP запроса
//
&НаСервере
Функция PathFromUrl(URL)
    //Убираем из URL адрес сайта
	Возврат СтрЗаменить(URL,"https://api-lk.tdme.ru","");	
КонецФункции // PathFromUrl()


// Возвращает HTTP соединение с настройками
//
// Возвращаемое значение:
//   HTTPСоединение  - с прописанным сервером
//
&НаСервере
Функция ПолучитьHTTPСоединение()
	//https://api-lk.tdme.ru
		Соединение = Новый HTTPСоединение(
	    "api-lk.tdme.ru", // сервер (хост)
	    443, // порт, по умолчанию для http используется 80, для https 443
	    , // пользователь для доступа к серверу (если он есть)
	    , // пароль для доступа к серверу (если он есть)
	    , // здесь указывается прокси, если он есть
	    , // таймаут в секундах, 0 или пусто - не устанавливать
	      Новый ЗащищенноеСоединениеOpenSSL()// защищенное соединение, если используется https
	);   

    Возврат Соединение;
КонецФункции // ПолучитьHTTPСоединение()

// <Описание функции>
//
// Параметры:
//  path	  - Строка - Строка пути по YAML
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//  HTTPЗапрос   - с заголовками
//
&НаСервере
Функция ПолучитьHTTPЗапрос(path)
//curl -X 'GET' \
//  'https://api-lk.tdme.ru/api/categories' \
//  -H 'accept: application/json' \
//  -H 'Authorization: Bearer 26|v0eZO8f1uDFNr9WIPQHQEVTXFwxEUW5FnIqiMdjl1be19cb3'


	//  "/api/categories"   - Функция для получения всего списка категорий
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("accept","application/json");
	Заголовки.Вставить("Authorization","Bearer 26|v0eZO8f1uDFNr9WIPQHQEVTXFwxEUW5FnIqiMdjl1be19cb3"); 
	
	Запрос = Новый HTTPЗапрос(path, Заголовки);
	
	Возврат Запрос;
КонецФункции // ПолучитьHTTPЗапрос()


#КонецОбласти