
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Выполнить проверку синтаксиса");

    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-v8version", "Версия платформы");

    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ThinClient", "Тонкий клиент");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-WebClient", "Веб-клиент");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-Server", "Сервер");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ExternalConnection", "Внешнее соединение");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ThickClientOrdinaryApplication", "Толстый клиент об. прил.");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ThickClientManagedApplication", "Толстый клиент упр. прил");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ThickClientServerManagedApplication", "Толстый клиент упр. прил. клиент-сервер");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ThickClientServerOrdinaryApplication", "Толстый клиент об. прил. клиент-сервер");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ExternalConnectionServer", "Внешнее соединение клиент-сервер");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-ConfigLogIntegrity", "Логическая целостность конфигурации");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-IncorrectReferences", "Поиск некорректных ссылок");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-DistributiveModules", "Поставка без исходных текстов");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-EmptyHandlers", "Поиск пустых обработчиков");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

    Конфигуратор = ОкружениеСборки.ПолучитьКонфигуратор();
    Версия1С = ПараметрыКоманды["-v8version"];
    Если ЗначениеЗаполнено(Версия1С) Тогда
        Конфигуратор.ИспользоватьВерсиюПлатформы(Версия1С);
    КонецЕсли;

    ДатаНачала = ТекущаяДата();
    Успешно = Истина;
    Попытка
        ПараметрыКоманды.Удалить("-v8version");
        Конфигуратор.ВыполнитьРасширеннуюПроверкуКонфигуратора(ПараметрыКоманды);
    Исключение
        Успешно = Ложь;
    КонецПопытки;

    ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
    ВывестиОтчетПроверкиКонфигурацииВФорматеJUnitXML(ЛогПроверкиИзКонфигуратора, Успешно, ДатаНачала);

    Если Не Успешно Тогда
        ВызватьИсключение "Не пройден синтаксический контроль!
        |" + ЛогПроверкиИзКонфигуратора;
    КонецЕсли;

    Возврат 0;

КонецФункции

Функция ВывестиОтчетПроверкиКонфигурацииВФорматеJUnitXML(ЛогПроверкиИзКонфигуратора, НетОшибок, ДатаНачала) Экспорт 

    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку("UTF-8");
    ЗаписьXML.ЗаписатьОбъявлениеXML();

    ВсегоТестов = 1;
    КоличествоОшибок = ?(НетОшибок, 0, ВсегоТестов);
    ВремяВыполнения = ТекущаяДата() - ДатаНачала;

    ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
    ЗаписьXML.ЗаписатьАтрибут("tests", XMLСтрока(ВсегоТестов));
    ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока("1CUNIT")); //TODO: указывать путь к набору тестов. 
    ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));
    ЗаписьXML.ЗаписатьАтрибут("failures", XMLСтрока(КоличествоОшибок));

    ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");	
    ЗаписьXML.ЗаписатьАтрибут("name", "Синтаксическая проверка конфигурации");
    ЗаписьXML.ЗаписатьНачалоЭлемента("properties");	
    ЗаписьXML.ЗаписатьКонецЭлемента();

    ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
    ЗаписьXML.ЗаписатьАтрибут("classname", "Тест");
    ЗаписьXML.ЗаписатьАтрибут("name", "Тест");
    ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));

    Если НетОшибок Тогда
        ЗаписьXML.ЗаписатьАтрибут("status", "passed");
    Иначе
        ЗаписьXML.ЗаписатьАтрибут("status", "failure");
        ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
        XMLОписание = XMLСтрока(ЛогПроверкиИзКонфигуратора); 
        ЗаписьXML.ЗаписатьАтрибут("message", XMLОписание);

        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЕсли;

    ЗаписьXML.ЗаписатьКонецЭлемента(); //testcase

    ЗаписьXML.ЗаписатьКонецЭлемента(); //testsuites

    СтрокаХМЛ = ЗаписьXML.Закрыть();

    ПутьОтчетаВФорматеJUnitxml = ОбъединитьПути(ОкружениеСборки.РабочийКаталог(), "check-syntax.xml");

    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.ОткрытьФайл(ПутьОтчетаВФорматеJUnitxml);
    ЗаписьXML.ЗаписатьБезОбработки(СтрокаХМЛ);// таким образом файл будет записан всего один раз, и не будет проблем с обработкой на билд-сервере TeamCity
    ЗаписьXML.Закрыть();
    Сообщить("Путь к лог-файлу проверки "+ПутьОтчетаВФорматеJUnitxml);

    Сообщить(СтрокаХМЛ);

КонецФункции