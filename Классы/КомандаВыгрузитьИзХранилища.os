#Использовать strings
#Использовать v8runner
#Использовать tempfiles
#Использовать asserts
#Использовать tool1cd

Перем Лог;
Перем ВФ;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Выгрузка версии из хранилища в рабочую среду");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "АдресХранилища", "Хранилище конфигурации 1С из которого выполняется сборка");
    // TODO с помощью tool1cd можно не применять авторизацию
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-user", "Пользователь хранилища 1С");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-pwd", "Пароль пользователя хранилища 1С (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-v", "Версия в хранилище, которую включаем в дистрибутив (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-v8version", "Версия платформы 1С");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-use-tool1cd", "Использовать для чтения хранилища Tool1CD");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-details", "Выходной файл с параметрами коммита хранилища (опционально)");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

    Параметры = РазобратьПараметры(ПараметрыКоманды);

    Попытка
        
        УправлениеКонфигуратором = ОкружениеСборки.ПолучитьКонфигуратор();
        ОкружениеСборки.ПрименитьВерсию1С(УправлениеКонфигуратором, Параметры.Версия1С);
        
        Если Параметры.ИспользоватьTool1CD Тогда
            ФайлВерсии = ВФ.НовоеИмяФайла(".cf");
        
            ВыгрузитьВерсиюСредствамиTool1CD(Параметры.АдресХранилища, Параметры.ВерсияХранилища, ФайлВерсии, Параметры.ФайлПараметровКоммита);
        
            ФайлТест = Новый Файл(ФайлВерсии);
            Ожидаем.Что(ФайлТест.Существует(), "Должен существовать выгруженный файл версии");
            
            ЗагрузитьКонфигурациюВБазуСборки(УправлениеКонфигуратором, ФайлВерсии);
        Иначе
            ВыгрузитьВерсиюИзХранилища(УправлениеКонфигуратором, Параметры.АдресХранилища, Параметры.ВерсияХранилища, Параметры.ПользовательХранилища, Параметры.ПарольХранилища);
            СоздатьФайлСВерсиейХранилища(Параметры.ВерсияХранилища, Параметры.ФайлПараметровКоммита);
        КонецЕсли;

    Исключение
        ВФ.Удалить();
        ВызватьИсключение;
    КонецПопытки;

    ВФ.Удалить();

    Возврат 0;

КонецФункции

Процедура ЗагрузитьКонфигурациюВБазуСборки(Знач УправлениеКонфигуратором, Знач ФайлВерсии) Экспорт
    Лог.Информация("Загружаю версию во временную базу");
    УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлВерсии, Истина);
    Лог.Информация(УправлениеКонфигуратором.ВыводКоманды());
КонецПроцедуры

// экспортная для целей тестирования
Функция РазобратьПараметры(Знач ПараметрыКоманды) Экспорт

    Результат = Новый Структура;

    Если ПустаяСтрока(ПараметрыКоманды["АдресХранилища"]) Тогда
        ВызватьИсключение "Не задан адрес хранилища";
    КонецЕсли;

    Результат.Вставить("АдресХранилища", ПараметрыКоманды["АдресХранилища"]);
    Результат.Вставить("ПользовательХранилища", ПараметрыКоманды["-storage-user"]);
    Результат.Вставить("ПарольХранилища", ПараметрыКоманды["-storage-pwd"]);
    Результат.Вставить("ВерсияХранилища", ПараметрыКоманды["-storage-v"]);
    Результат.Вставить("Версия1С", ПараметрыКоманды["-v8version"]);
    Результат.Вставить("ИспользоватьTool1CD", ПараметрыКоманды["-use-tool1cd"]);
    Результат.Вставить("ФайлПараметровКоммита", ПараметрыКоманды["-details"]);

    Возврат Результат;

КонецФункции

Процедура ВыгрузитьВерсиюИзХранилища(Конфигуратор, 
    Знач ПутьКХранилищу,
    Знач ВерсияХранилища,
    Знач ПользовательХранилища,
    Знач ПарольХранилища = "") Экспорт

    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """+ПутьКХранилищу+"""");

    ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

    Если ЗначениеЗаполнено(ПарольХранилища) Тогда
        ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;

    ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUpdateCfg");
    
    Если ЗначениеЗаполнено(ВерсияХранилища) Тогда
        ПараметрыЗапуска.Добавить("-v "+ВерсияХранилища);
    КонецЕсли;

    ПараметрыЗапуска.Добавить("-force");

    ПараметрыЗапуска.Добавить("/UpdateDBCfg");

    Лог.Отладка("Получаю новую версию из хранилища");

    Попытка
        Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
    Исключение

        ТекстОшибки = Конфигуратор.ВыводКоманды();
        ВызватьИсключение ТекстОшибки;

    КонецПопытки;

КонецПроцедуры

Процедура СоздатьФайлСВерсиейХранилища(Знач ВерсияХранилища, Знач ВыходнойФайл = Неопределено)

    Если ЗначениеЗаполнено(ВыходнойФайл) И ВерсияХранилища <> Неопределено Тогда
        Документ = Новый ТекстовыйДокумент;
        Документ.ДобавитьСтроку("НомерВерсииХранилища=" + ВерсияХранилища);
        Документ.Записать(ВыходнойФайл);
    КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьВерсиюСредствамиTool1CD(Знач КаталогХранилища, Знач ВерсияХранилища, Знач ФайлВерсии, Знач ФайлПараметровКоммита = Неопределено) Экспорт

    ФайлХранилища = ОбъединитьПути(КаталогХранилища, "1cv8ddb.1CD");
    Чтение = Новый ЧтениеХранилищаКонфигурации;
    Если ВерсияХранилища = Неопределено Тогда
        ВерсияХранилища = 0;
    КонецЕсли;

    Чтение.ВыгрузитьВерсиюКонфигурации(ФайлХранилища, ФайлВерсии, ВерсияХранилища);

    Если ЗначениеЗаполнено(ФайлПараметровКоммита) Тогда
        СоздатьФайлСПараметрамиКоммита(ФайлХранилища, ВерсияХранилища, ФайлПараметровКоммита);
    КонецЕсли;

КонецПроцедуры

Процедура СоздатьФайлСПараметрамиКоммита(Знач ФайлХранилища, Знач ВерсияХранилища, Знач ВыходнойФайл)

    ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
    ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
    Попытка
        ТаблицаБД = ЧтениеБазыДанных.ПрочитатьТаблицу("VERSIONS");
        Для Каждого Стр Из ТаблицаБД Цикл
            Стр.VERNUM = Число(Стр.VERNUM);
        КонецЦикла
    Исключение
        ЧтениеБазыДанных.ЗакрытьФайл();
        ВызватьИсключение;
    КонецПопытки;

    ЧтениеБазыДанных.ЗакрытьФайл();

    Лог.Отладка("Таблица версий содержит " + ТаблицаБД.Количество() + " строк");

    Если ВерсияХранилища = 0 Тогда
        ТаблицаБД.Сортировать("VERNUM Убыв");
        СтрокаВерсии = ТаблицаБД[0];
    Иначе
        СтрокаВерсии = ТаблицаБД.Найти(ВерсияХранилища, "VERNUM");
        Если СтрокаВерсии = Неопределено Тогда
            ВызватьИсключение СтрШаблон("Заданный номер версии %1 не был найден в таблице БД хранилища", ВерсияХранилища);
        КонецЕсли;
    КонецЕсли;

    Документ = Новый ТекстовыйДокумент;
    Документ.ДобавитьСтроку("НомерВерсииХранилища=" + СтрокаВерсии.VERNUM);
    Документ.ДобавитьСтроку("Дата=" + СтрокаВерсии.VERDATE);
    Документ.ДобавитьСтроку("Тэг=" + СтрокаВерсии.CODE);
    Документ.Записать(ВыходнойФайл);

КонецПроцедуры

Функция ПрочитатьПараметрыКоммита(Знач ФайлПараметров) Экспорт

    ПараметрыКоммита = Новый Структура;

    ТД = Новый ТекстовыйДокумент;
    ТД.Прочитать(ФайлПараметров);
    Для Сч = 1 По ТД.КоличествоСтрок() Цикл
        
        текст = ТД.ПолучитьСтроку(Сч);
        Поз = Найти(Текст, "=");
        Если Поз = 0 Тогда
            Продолжить;
        КонецЕсли;

        Ключ = Лев(Текст, Поз-1);
        Значение = Сред(Текст, Поз+1);

        Если Ключ = "НомерВерсииХранилища" Тогда
            Значение = Число(Значение);
        КонецЕсли;
        
        ПараметрыКоммита.Вставить(Ключ, Значение);

    КонецЦикла;

    Возврат ПараметрыКоммита;

КонецФункции

Функция ПолучитьКонфигуратор(РабочийКаталог = "")

    Если ПустаяСтрока(РабочийКаталог) Тогда
        РабочийКаталог = ВФ.СоздатьКаталог();
        Лог.Отладка("Создан временный каталог: " + РабочийКаталог);
    КонецЕсли;

    Конфигуратор = Новый УправлениеКонфигуратором();
    Конфигуратор.КаталогСборки(РабочийКаталог);
    
    Возврат Конфигуратор;

КонецФункции // ПолучитьКонфигуратор()

//////////////////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
ВФ = Новый МенеджерВременныхФайлов;